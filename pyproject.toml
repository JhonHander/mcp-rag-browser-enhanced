[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-server-rag-web-browser"
version = "0.1.6"
description = "MCP Server for RAG Web Browser"
authors = [
    { name = "Apify Technologies s.r.o.", email = "support@apify.com" }
]
readme = "README.md"
license = { file = "LICENSE" }
homepage = "https://apify.com"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries",
]
keywords = [
    "apify",
    "crawler",
    "rag-web-browser",
    "model-context-protocol",
    "mcp",
    "mcp-server",
    "rag",
    "scraper",
]
dependencies = [
    "python-dotenv>=1.0.1,<2.0.0",
    "pydantic>=2.10.3,<3.0.0",
    "mcp>=1.1.0,<2.0.0",
    "httpx>=0.28.1,<1.0.0",
]
requires-python = ">=3.10,<3.14"

[project.optional-dependencies]
dev = [
    "black>=24.8.0,<25.0.0",
    "build>=1.2.0,<2.0.0",
    "mypy>=1.11.0,<2.0.0",
    "pre-commit>=3.7.0,<4.0.0",
    "pytest>=8.3.0,<9.0.0",
    "ruff>=0.5.0,<1.0.0",
    "setuptools>=70.3.0,<71.0.0",
]

[project.urls]
Homepage = "https://apify.com"
Changelog = "https://github.com/apify/mcp-server-rag-web-browser/blob/master/CHANGELOG.md"
Documentation = "https://github.com/apify/mcp-server-rag-web-browser"
"Issue Tracker" = "https://github.com/apify/mcp-server-rag-web-browser/issues"
Repository = "https://github.com/apify/mcp-server-rag-web-browser"

[project.scripts]
mcp-server-rag-web-browser = "mcp_server_rag_web_browser:main"

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed in {filename}
    "BLE001",  # Do not catch blind exception
    "C901",    # `{name}` is too complex
    "COM812",  # This rule may cause conflicts when used with the formatter
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "D107",    # Missing docstring in `__init__`
    "EM",      # flake8-errmsg
    "G004",    # Logging statement uses f-string
    "ISC001",  # This rule may cause conflicts when used with the formatter
    "PGH003",  # Use specific rule codes when ignoring type issues
    "PLR0911", # Too many return statements
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "PTH",     # flake8-use-pathlib
    "PYI034",  # `__aenter__` methods in classes like `{name}` usually return `self` at runtime
    "PYI036",  # The second argument in `__aexit__` should be annotated with `object` or `BaseException | None`
    "S102",    # Use of `exec` detected
    "S105",    # Possible hardcoded password assigned to
    "S106",    # Possible hardcoded password assigned to argument: "{name}"
    "S301",    # `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    "S303",    # Use of insecure MD2, MD4, MD5, or SHA1 hash function
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "TRY003",  # Avoid specifying long messages outside the exception class
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = [
    "F401", # Unused imports
]
"**/{tests}/*" = [
    "D",       # Everything from the pydocstyle
    "INP001",  # File {filename} is part of an implicit namespace package, add an __init__.py
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "S101",    # Use of assert detected
    "SLF001",  # Private member accessed: `{name}`
    "T20",     # flake8-print
    "TRY301",  # Abstract `raise` to an inner function
]
"**/{examples}/*" = [
    "D",       # Everything from the pydocstyle
    "INP001",  # File {filename} is part of an implicit namespace package, add an __init__.py
    "T20",     # flake8-print
]


[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-branches = 18

[tool.mypy]
python_version = "3.10"
plugins = []
files = ["src"]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true

[tool.mypy-sortedcollections]
ignore_missing_imports = true

[tool.basedpyright]
typeCheckingMode = "standard"
